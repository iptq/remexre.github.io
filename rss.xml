<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>remexre.xyz</title>
        <link>https://remexre.xyz/</link>
        <description></description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://remexre.xyz/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Fri, 12 Feb 2021 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>SilvIR: Definition, Draft 1</title>
                <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
                <link>https://remexre.xyz/silvir/definition-draft-1/</link>
                <guid>https://remexre.xyz/silvir/definition-draft-1/</guid>
                <description>&lt;p&gt;&lt;em&gt;This post assumes you&#x27;ve read the &lt;a href=&quot;https:&#x2F;&#x2F;remexre.xyz&#x2F;silvir&#x2F;introduction&#x2F;&quot;&gt;previous one in the series&lt;&#x2F;a&gt;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As covered in the previous post, Silver has a bunch of features that require some trickiness in SilvIR to make implementable.
I&#x27;ll dump the full grammar, then go over it in pieces.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Literal ::= Int
         |  String

PrimPattern ::= varPat(LocalName)
             |  litPat(Literal)
             |  anyPat

Pattern ::= recordPat(Map&amp;lt;String, PrimPattern&amp;gt;)
         |  treeOrTermPat(ProdName, List&amp;lt;PrimPattern&amp;gt;)
         |  primPat(PrimPattern)

IsChildDecorable ::= childIsDecorable
                  |  childIsntDecorable

Expr ::= local(LocalName)
      |  global(GlobalName)
      |  lit(Literal)
      |  let(LocalName, Expr, Expr)
      |  letrec(Map&amp;lt;LocalName, Expr&amp;gt;, Expr)
      |  lam(List&amp;lt;LocalName&amp;gt;, Expr)
      |  call(Expr, List&amp;lt;Expr&amp;gt;)
      |  error(Expr)
      |  thunk(Expr)
      |  force(Expr)
      |  case(Expr, List&amp;lt;Pair&amp;lt;Pattern, Expr&amp;gt;&amp;gt;)
      |  pureForeign(String, List&amp;lt;Expr&amp;gt;)
      |  impureForeign(String, List&amp;lt;Expr&amp;gt;)
      |  makeRecord(Map&amp;lt;String, Expr&amp;gt;)
      |  getRecordMember(String, Expr)
      |  cons(ProdName, List&amp;lt;Pair&amp;lt;IsChildDecorable, Expr&amp;gt;&amp;gt;)
      |  getChild(Nat, Expr)
      |  getAttr(AttrName, Expr)
      |  setAttr(AttrName, Expr, Expr, Expr)
      |  combineAttr(AttrName, Expr, Expr, Expr, Expr)
      |  copyTree(Expr)
      |  decorate(Expr, Map&amp;lt;AttrName, Expr&amp;gt;)
      |  undecorate(Expr)

Priority ::= Int

TopLevelItem ::= globalDecl(GlobalName, Expr)
              |  prodDecl(ProdName, NTName)
	      |  defaultProdBodyDecl(NTName, Priority, LocalName, Expr)
	      |  prodBodyDecl(ProdName, Priority, LocalName, Expr)

Program ::= Set&amp;lt;TopLevelItem&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;literals&quot;&gt;&lt;code&gt;Literal&lt;&#x2F;code&gt;s&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Literal ::= Int
         |  String
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Literals are used in a few places in the grammar; they are a subset of the runtime values that exist.
Runtime values also include functions (which are constructed with &lt;code&gt;lam&lt;&#x2F;code&gt;), thunks (which are constructed with &lt;code&gt;thunk&lt;&#x2F;code&gt;), records (which are constructed with &lt;code&gt;makeRecord&lt;&#x2F;code&gt;), terms (which are constructed with &lt;code&gt;cons&lt;&#x2F;code&gt;), and trees (which are constructed with &lt;code&gt;decorate&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;patterns&quot;&gt;&lt;code&gt;Pattern&lt;&#x2F;code&gt;s&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;PrimPattern ::= varPat(LocalName)
             |  litPat(Literal)
             |  anyPat

Pattern ::= recordPat(Map&amp;lt;String, PrimPattern&amp;gt;)
         |  treeOrTermPat(ProdName, List&amp;lt;PrimPattern&amp;gt;)
         |  primPat(PrimPattern)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Patterns in SilvIR are restricted to &amp;quot;simple patterns,&amp;quot; which disallow nested patterns.
SilvIR patterns also do &lt;em&gt;not&lt;&#x2F;em&gt; interact with forwarding in any way; there will be later discussion on this.&lt;&#x2F;p&gt;
&lt;p&gt;Note that &lt;code&gt;recordPat&lt;&#x2F;code&gt; implements a &amp;quot;subset match&amp;quot;; fields not present in the pattern are ignored.
As an example, the following expression evaluates to &lt;code&gt;1&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;case(makeRecord({ &amp;quot;a&amp;quot; = lit(1), &amp;quot;b&amp;quot; = lit(2) }),
  [ (recordPat({ &amp;quot;a&amp;quot; = varPat(&amp;quot;x&amp;quot;) }), local(&amp;quot;x&amp;quot;))
  , (anyPat, lit(3))
  ])
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Everything else in patterns should have fairly intuitive semantics.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exprs-and-toplevelitems-the-fp-looking-parts&quot;&gt;&lt;code&gt;Expr&lt;&#x2F;code&gt;s and &lt;code&gt;TopLevelItem&lt;&#x2F;code&gt;s, the FP-looking parts&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Expr ::= local(LocalName)
      |  global(GlobalName)
      |  lit(Literal)
      |  let(LocalName, Expr, Expr)
      |  letrec(Map&amp;lt;LocalName, Expr&amp;gt;, Expr)
      |  lam(List&amp;lt;LocalName&amp;gt;, Expr)
      |  call(Expr, List&amp;lt;Expr&amp;gt;)
      |  error(Expr)
      |  thunk(Expr)
      |  force(Expr)
      |  case(Expr, List&amp;lt;Pair&amp;lt;Pattern, Expr&amp;gt;&amp;gt;)
      |  pureForeign(String, List&amp;lt;Expr&amp;gt;)
      |  impureForeign(String, List&amp;lt;Expr&amp;gt;)
      |  makeRecord(Map&amp;lt;String, Expr&amp;gt;)
      |  getRecordMember(String, Expr)
      |  ...

TopLevelItem ::= globalDecl(GlobalName, Expr)
              |  ...

Program ::= Set&amp;lt;TopLevelItem&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Most of what appears here should look &amp;quot;fairly normal&amp;quot; for a dynamically-typed, call-by-value, functional language with multi-argument functions and optional laziness.
(Well, I guess I said &amp;quot;tastes like Scheme&amp;quot; in more words...)&lt;&#x2F;p&gt;
&lt;p&gt;SilvIR is a call-by-value language, but supports thunks as a built-in type in order to support Silver&#x27;s demand-driven attribute evaluation strategy.
Thunks are created with the &lt;code&gt;thunk&lt;&#x2F;code&gt; AST node, but also result from using &lt;code&gt;global&lt;&#x2F;code&gt; to access global variables, and &lt;code&gt;local&lt;&#x2F;code&gt; to access variables bound by a &lt;code&gt;letrec&lt;&#x2F;code&gt;.
This is because laziness is also used to implement circular&#x2F;recursive values, which one can create with both global bindings and letrec-created bindings.&lt;&#x2F;p&gt;
&lt;p&gt;Calls to foreign functions are split into &amp;quot;pure&amp;quot; and &amp;quot;impure&amp;quot; versions.
Essentially, a call is considered pure if there is no non-UB way for the function to exhibit side effects, &lt;em&gt;including non-termination&lt;&#x2F;em&gt;.
This gives the optimizer leeway to aggressively transform, duplicate, or eliminate calls to these functions.
Examples of pure foreign functions are arithmetic operators on integers, string concatenation, and &lt;code&gt;reflect&lt;&#x2F;code&gt;.
Examples of impure foreign functions are &lt;code&gt;genInt&lt;&#x2F;code&gt; and &lt;code&gt;error&lt;&#x2F;code&gt; (though, &lt;code&gt;error&lt;&#x2F;code&gt; has its own AST node to facilitate debugger integration).&lt;&#x2F;p&gt;
&lt;p&gt;At program startup, a global environment is established from the top-level items.
The expression &lt;code&gt;call(force(global(&amp;quot;main&amp;quot;)))&lt;&#x2F;code&gt; is then evaluated.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exprs-and-toplevelitems-the-attribute-grammar-specific-parts&quot;&gt;&lt;code&gt;Expr&lt;&#x2F;code&gt;s and &lt;code&gt;TopLevelItem&lt;&#x2F;code&gt;s, the attribute-grammar-specific parts&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Expr ::= ...
      |  cons(ProdName, List&amp;lt;Pair&amp;lt;IsChildDecorable, Expr&amp;gt;&amp;gt;)
      |  getChild(Nat, Expr)
      |  getAttr(AttrName, Expr)
      |  setAttr(AttrName, Expr, Expr, Expr)
      |  combineAttr(AttrName, Expr, Expr, Expr, Expr)
      |  copyTree(Expr)
      |  decorate(Expr, Map&amp;lt;AttrName, Expr&amp;gt;)
      |  undecorate(Expr)

IsChildDecorable ::= childIsDecorable
                  |  childIsntDecorable

TopLevelItem ::= ...
              |  prodDecl(ProdName, NTName)
	      |  defaultProdBodyDecl(NTName, Priority, LocalName, Expr)
	      |  prodBodyDecl(ProdName, Priority, LocalName, Expr)

Priority ::= Int
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The attribute-grammar-specific parts of SilvIR are the complicated part with potentially-controversial semantics, so this might be unclear.&lt;&#x2F;p&gt;
&lt;p&gt;We refer to data values that immediately result from applying a constructor to arguments as terms (often as &lt;strong&gt;undecorated terms&lt;&#x2F;strong&gt; for clarity).
We call the results of the process in which inherited attributes are applied and attribute thunks are created trees (often as &lt;strong&gt;decorated trees&lt;&#x2F;strong&gt; for clarity).&lt;&#x2F;p&gt;
&lt;p&gt;Undecorated terms can be constructed with the &lt;code&gt;cons&lt;&#x2F;code&gt; expression.
It takes the name of the production the value belongs to (sometimes referred to as the tag) and a list of arguments, as well as a flag describing whether the child is decorable.
This flag (formerly, misleadingly, known as &lt;code&gt;IsChildDeclaredDecorated&lt;&#x2F;code&gt;) determines whether the child will be traversed at tree-construction time.
This is effectively a single bit of type information; in the future, SilvIR may be changed to provide this information via &lt;code&gt;prodDecl&lt;&#x2F;code&gt; instead.&lt;&#x2F;p&gt;
&lt;p&gt;Most children of nonterminal type should be declared &lt;code&gt;childIsDecorable&lt;&#x2F;code&gt;.
Examples of types for which this should be &lt;code&gt;childIsntDecorable&lt;&#x2F;code&gt; are &lt;code&gt;Integer&lt;&#x2F;code&gt; (since integers aren&#x27;t nonterminal types), &lt;code&gt;Decorated Foo&lt;&#x2F;code&gt; (since references to other trees shouldn&#x27;t be redecorated), and skolem variables (since these may be instantiated to one of the former).
If the exact semantics of this are unclear, they should hopefully become more clear later, when the execution semantics are gone over.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;getChild&lt;&#x2F;code&gt; simply reads a child from a term or tree.
It&#x27;s UB to read a child that doesn&#x27;t exist, etc, etc.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;getAttr&lt;&#x2F;code&gt; reads an attribute off of a tree.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;setAttr&lt;&#x2F;code&gt; and &lt;code&gt;combineAttr&lt;&#x2F;code&gt; are used at tree-construction time to write attributes to a tree.
&lt;code&gt;setAttr(attr, tree, value, next)&lt;&#x2F;code&gt; evaluates to the same value &lt;code&gt;next&lt;&#x2F;code&gt; evaluates to, after performing the side effect of setting the attribute &lt;code&gt;attr&lt;&#x2F;code&gt; on the tree &lt;code&gt;tree&lt;&#x2F;code&gt; to the value that results from evaluating &lt;code&gt;value&lt;&#x2F;code&gt;.
This possibly replaces a previous value of the attribute.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;combineAttr(attr, tree, value, func, next)&lt;&#x2F;code&gt; is similar, and is used to implement collection attributes.
If &lt;code&gt;attr&lt;&#x2F;code&gt; was already set on &lt;code&gt;tree&lt;&#x2F;code&gt;, it sets it to the result of evaluating &lt;code&gt;call(func, getAttr(attr, tree), value)&lt;&#x2F;code&gt;.
If &lt;code&gt;attr&lt;&#x2F;code&gt; was not already set on &lt;code&gt;tree&lt;&#x2F;code&gt;, it sets it to the result of evaluating &lt;code&gt;value&lt;&#x2F;code&gt;.
This whole &lt;code&gt;combineAttr&lt;&#x2F;code&gt; expression then evalutes to the result of evaluating &lt;code&gt;next&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;copyTree&lt;&#x2F;code&gt; simply copies a tree, so mutations can be made on it without disturbing the original.
This copy is deep in the decorable-term-structure of the tree, but shallow in the attributes and in the non-decorable-children.
(This isn&#x27;t needed by current Silver semantics, but will come in handy for Lucas&#x27; redecoration work, and is easy.)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;undecorate&lt;&#x2F;code&gt; returns a copy of a tree as a term, stripping off all attributes on decorable children.
This copy is deep in the decorable-term-structure of the tree, but shallow in the non-decorable-children.&lt;&#x2F;p&gt;
&lt;p&gt;All these pieces come together with &lt;code&gt;decorate&lt;&#x2F;code&gt;.
&lt;code&gt;decorate&lt;&#x2F;code&gt;&#x27;s first argument is a term to perform tree-construction on.
First, a tree is allocated, mirroring the structure of the term, replacing decorable children with freshly allocated trees.
Then, tree-construction proceeds; for each node:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Collect the production bodies that apply to this term, and sort them by priority, low to high.
This is every &lt;code&gt;prodBodyDecl&lt;&#x2F;code&gt; that has the same &lt;code&gt;ProdName&lt;&#x2F;code&gt; as the term, as well as every &lt;code&gt;defaultProdBodyDecl&lt;&#x2F;code&gt; that has the same &lt;code&gt;NTName&lt;&#x2F;code&gt; as the one associated to the term by the &lt;code&gt;prodDecl&lt;&#x2F;code&gt; that declared the production.&lt;&#x2F;li&gt;
&lt;li&gt;Run every production body that has a negative priority in a priority-respecting order.
Production bodies should be structured essentially as the identity function, but with side effects via &lt;code&gt;setAttr&lt;&#x2F;code&gt; and &lt;code&gt;combineAttr&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Run this process for each decorable child, from lowest index to highest.&lt;&#x2F;li&gt;
&lt;li&gt;Run every production body that has a non-negative priority in a priority-respecting order.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Priorities allow for default productions and the various automatic attributes to be implemented correctly, and negative priorities allow for the optimization where inherited attributes are passed down strictly, avoiding a traversal back up the tree when they&#x27;re demanded.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;remarks&quot;&gt;Remarks&lt;&#x2F;h2&gt;
&lt;p&gt;For a worked-through example of a simple grammar translated to (a very slightly older version of) this IR and run, see &lt;a href=&quot;https:&#x2F;&#x2F;remexre.xyz&#x2F;silvir&#x2F;arithmetic-example.html&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Annotations aren&#x27;t covered here; I think they can be transformed to children?
In the next post, we&#x27;ll look at the execution semantics of this IR in more depth.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>SilvIR: Introduction</title>
                <pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate>
                <link>https://remexre.xyz/silvir/introduction/</link>
                <guid>https://remexre.xyz/silvir/introduction/</guid>
                <description>&lt;p&gt;I&#x27;m planning to work on an IR for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;melt-umn&#x2F;silver&quot;&gt;Silver&lt;&#x2F;a&gt;, an attribute-grammar based language for compiler construction.
This&#x27;ll probably form the core of my MS thesis work, so my advisor recommended I blog about it as a way to communicate everything properly to the rest of the group, with the side benefits of getting a head start on laying everything out for writing the actual thesis.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;background&quot;&gt;Background&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;em&gt;(If you&#x27;re a MELT group member I&#x27;m making read this, feel free to skip this section.)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Attribute grammars are a formalism for describing computations on trees.
The core idea is that you describe the syntax (concrete or abstract) of your language with a grammar, and then can perform transformations on it by describing them in terms of attributes.&lt;&#x2F;p&gt;
&lt;p&gt;Generally, attributes can be divided into two classes, &lt;em&gt;inherited&lt;&#x2F;em&gt; and &lt;em&gt;synthesized&lt;&#x2F;em&gt;.
Inherited attributes (informally, inhs) are passed from the parent node down to its children.
Synthesized attributes (informally, syns) are computed from inherited attributes and children, and typically are passed from children up to their parents.&lt;&#x2F;p&gt;
&lt;p&gt;Typical examples of inherited attributes include the environment and other information about the context of a term.
Typical examples of synthesized attributes include the type of a term, the errors present on a term and its subterms, and the translation of a term to an IR or target language.&lt;&#x2F;p&gt;
&lt;p&gt;Silver implements one particular evaluation strategy for attribute grammars, demand-driven evaluation.
This looks approximately like a lazy functional language, and many idioms are shared between Haskell and Silver as a result.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;&#x2F;h1&gt;
&lt;p&gt;Silver is super convenient to use for writing compilers with, but its performance is a lot worse than I wish it was.
Furthermore, lots of optimizations that would be really nice to have implemented are pretty dang tricky.
This is mostly for historical reasons relating to the implementation of Silver, rather than its properties or expressiveness as a language -- Silver best-practices didn&#x27;t exist when Silver was written, so it doesn&#x27;t follow them.&lt;&#x2F;p&gt;
&lt;p&gt;Currently, Silver compiles directly (i.e., without an IR!) to a huge amount of Java source code, which is unideal from an aesthetic perspective, and makes implementing additional passes pretty tricky.&lt;&#x2F;p&gt;
&lt;p&gt;The big goals of SilvIR as an IR for Silver are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;To make experimenting with different translations easier (eg. &amp;quot;can we do aggressive stack allocation &lt;em&gt;a la&lt;&#x2F;em&gt; Go to reduce GC pressure?&amp;quot; &amp;quot;would &lt;a href=&quot;https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;research&#x2F;uploads&#x2F;prod&#x2F;2020&#x2F;11&#x2F;perceus-tr-v1.pdf&quot;&gt;Perceus&lt;&#x2F;a&gt; result in measurable speedups?&amp;quot;)&lt;&#x2F;li&gt;
&lt;li&gt;To implement &amp;quot;linking,&amp;quot; which should drastically reduce startup time versus the Java translation&lt;&#x2F;li&gt;
&lt;li&gt;To make writing relatively low-level optimization passes (eg. and esp. strictness analysis) easier&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Initially I plan to compile Silver to SilvIR, and write an interpreter for SilvIR with the &lt;a href=&quot;https:&#x2F;&#x2F;www.graalvm.org&#x2F;graalvm-as-a-platform&#x2F;language-implementation-framework&#x2F;&quot;&gt;Truffle Language Implementation Framework&lt;&#x2F;a&gt; in order to get access to a fast runtime and high-throughput GC easily.&lt;&#x2F;p&gt;
&lt;p&gt;Furthermore, as &amp;quot;stretch goals,&amp;quot; it&#x27;d be kinda nice to have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A real profiler that can map hotspots to source language positions (via &lt;a href=&quot;https:&#x2F;&#x2F;visualvm.github.io&#x2F;graal.html&quot;&gt;VisualVM&#x27;s GraalVM support&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;A real debugger (via &lt;a href=&quot;https:&#x2F;&#x2F;www.graalvm.org&#x2F;tools&#x2F;chrome-debugger&#x2F;&quot;&gt;GraalVM&#x27;s Chrome DevTools Protocol support&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.graalvm.org&#x2F;tools&#x2F;code-coverage&#x2F;&quot;&gt;Code coverage checking&lt;&#x2F;a&gt; for seeing what dark corners of the compiler are never exercised (and for test coverage purposes in general)&lt;&#x2F;li&gt;
&lt;li&gt;A JavaScript or WASM backend, as a step towards being able to do a non-cursed &amp;quot;try Silver in the browser&amp;quot; thing&lt;&#x2F;li&gt;
&lt;li&gt;A formal semantics of SilvIR in Coq or Lean, to talk about the correctness of optimizations and backends&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;design-considerations&quot;&gt;Design Considerations&lt;&#x2F;h1&gt;
&lt;p&gt;Silver supports a large number of extensions to the basic idea of attribute grammars, and supporting all of them is necessarily a goal.
Notable extensions include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;melt.cs.umn.edu&#x2F;silver&#x2F;concepts&#x2F;aspects&#x2F;&quot;&gt;Aspect productions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;melt.cs.umn.edu&#x2F;silver&#x2F;concepts&#x2F;automatic-attributes&#x2F;&quot;&gt;Automatic attributes&lt;&#x2F;a&gt;, including functor and monoid attributes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;melt.cs.umn.edu&#x2F;silver&#x2F;concepts&#x2F;collections&#x2F;&quot;&gt;Collection attributes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;melt.cs.umn.edu&#x2F;silver&#x2F;ref&#x2F;stmt&#x2F;forwarding&#x2F;&quot;&gt;Forwarding&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;melt.cs.umn.edu&#x2F;silver&#x2F;concepts&#x2F;decorated-vs-undecorated&#x2F;#higher-order-undecorated&quot;&gt;Higher-order attributes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;melt.cs.umn.edu&#x2F;silver&#x2F;ref&#x2F;expr&#x2F;pattern-matching&#x2F;&quot;&gt;Pattern matching&lt;&#x2F;a&gt;, which has some &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;melt-umn&#x2F;silver&#x2F;issues&#x2F;387&quot;&gt;unusual consequences&lt;&#x2F;a&gt; when combined with forwarding (&lt;a href=&quot;http:&#x2F;&#x2F;melt.cs.umn.edu&#x2F;silver&#x2F;concepts&#x2F;interference&#x2F;#patterns-arent-exceptions&quot;&gt;though you shouldn&#x27;t do this anyway&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;melt.cs.umn.edu&#x2F;silver&#x2F;concepts&#x2F;decorated-vs-undecorated&#x2F;#reference-decorated&quot;&gt;Reference attributes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;All of these are used within the implementation of Silver, so must be supported before Silver can be bootstrapped on SilvIR.
In the &lt;a href=&quot;https:&#x2F;&#x2F;remexre.xyz&#x2F;silvir&#x2F;definition-draft-1&#x2F;&quot;&gt;next post&lt;&#x2F;a&gt;, we&#x27;ll look at (the current draft of) the actual definition of the IR.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Fall 2020 Plans</title>
                <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
                <link>https://remexre.xyz/fall-2020-plans/</link>
                <guid>https://remexre.xyz/fall-2020-plans/</guid>
                <description>&lt;p&gt;RIP, 5 month gap.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;short-term-plans-next-semester&quot;&gt;Short-Term Plans (Next Semester)&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Silver: Finish highlighting, maybe take a look at LSP? Perf still seems
problematic, though if the Eclipse plugin&#x27;s performance is less bad than
Monto 3&#x27;s was, seems like there&#x27;s still low-hanging fruit.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Algebraic Effects for ableC: The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;koka-lang&#x2F;koka&quot;&gt;Koka&lt;&#x2F;a&gt; group recently had a talk on
how they compile their language (with algebraic effects) to efficient C. I
think the same approach should work to implement an algebraic effects
extension for ableC too.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Stahl eliminators: In theory, I should be able to define a function that
recurses over the definition of a datatype to be act as an
eliminator&#x2F;induction principle for it. The original levitation paper defines
one, but their formulation doesn&#x27;t work for the cleaned-up representation for
datatypes I&#x27;m using (from A Practical Guide to Levitation). I&#x27;ve been toying
with a different representation that I hope would make defining the generic
eliminator easier, and improve the performance of a naive compiled
implementation, so hopefully that works?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;long-term-plans-thesis&quot;&gt;Long-Term Plans (Thesis?)&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;algebraic-effects-in-stahl&quot;&gt;Algebraic Effects in Stahl&lt;&#x2F;h2&gt;
&lt;p&gt;I think either linear types (or one of its extensions, such as quantitative
type theory) or &#x2F;maybe&#x2F; coinduction might be able to fix the soundness issues?
I don&#x27;t know how to do the proofs of soundness for MLTT (or dependent type
theories in general), so I&#x27;d need to learn to do those first.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cubical-levitation&quot;&gt;Cubical Levitation&lt;&#x2F;h2&gt;
&lt;p&gt;Even if I get the Stahl eliminators item above working, Stahl still won&#x27;t have
everything present in most HoTT&#x2F;Cubical type theories. The biggest item is
higher inductive types (HITs). I don&#x27;t think these should actually be too
incredibly hard to work in, but I don&#x27;t know what soundness problems exist with
HITs, and I should like, actually learn the mathematical model behind cubical
type theory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;formally-verifying-stahlos&quot;&gt;Formally Verifying StahlOS&lt;&#x2F;h2&gt;
&lt;p&gt;The parts of the implementation that (in my opinion at least) it makes sense to
formally verify are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;a href=&quot;https:&#x2F;&#x2F;git.sr.ht&#x2F;%7Eremexre&#x2F;stahl&#x2F;tree&#x2F;7bf2eb256167be5b7093a32d8819707d1bca1286&#x2F;src&#x2F;kernel-aarch64&#x2F;forth&#x2F;builtins.s&quot;&gt;builtins&lt;&#x2F;a&gt;, which I&#x27;d probably need to define axiomatically in the
high-level semantics.&lt;&#x2F;li&gt;
&lt;li&gt;the &amp;quot;&lt;a href=&quot;https:&#x2F;&#x2F;git.sr.ht&#x2F;%7Eremexre&#x2F;stahl&#x2F;tree&#x2F;7bf2eb256167be5b7093a32d8819707d1bca1286&#x2F;src&#x2F;kernel-aarch64&#x2F;forth&#x2F;pseudobuiltins.s&quot;&gt;pseudobuiltins&lt;&#x2F;a&gt;&amp;quot;, which are basically just hand-compiled code that
should be identical (or nearly so) to what the normal compiler would output.&lt;&#x2F;li&gt;
&lt;li&gt;the first file of the &lt;a href=&quot;https:&#x2F;&#x2F;git.sr.ht&#x2F;%7Eremexre&#x2F;stahl&#x2F;tree&#x2F;7bf2eb256167be5b7093a32d8819707d1bca1286&#x2F;src&#x2F;kernel-aarch64&#x2F;init&#x2F;init.fth&quot;&gt;init process&lt;&#x2F;a&gt;, which defines functions, IF,
loops, string literals, and a lot of other stuff that would normally be built
into the language itself.&lt;&#x2F;li&gt;
&lt;li&gt;a simple &lt;a href=&quot;https:&#x2F;&#x2F;git.sr.ht&#x2F;%7Eremexre&#x2F;stahl&#x2F;tree&#x2F;7bf2eb256167be5b7093a32d8819707d1bca1286&#x2F;src&#x2F;kernel-aarch64&#x2F;init&#x2F;repl.fth&quot;&gt;REPL&lt;&#x2F;a&gt; that runs over the serial port.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This notably excludes the serial driver and the bootloader, but I think I&#x27;d
like to try and verify everything from when the bootloader hands off to the
kernel on.&lt;&#x2F;p&gt;
&lt;p&gt;I think this would probably have me learning separation logic, and possibly one
of the theorem provers with better support for calling an SMT solver (e.g.
Isabelle, though I remember a paper about extending Coq with one).&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Thoughts on ML-style Modules</title>
                <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
                <link>https://remexre.xyz/stahl/thoughts-on-ml-modules/</link>
                <guid>https://remexre.xyz/stahl/thoughts-on-ml-modules/</guid>
                <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h1&gt;
&lt;p&gt;I&#x27;ve been confused for a while about why SML&#x2F;OCaml advocates tout the module system as being such a useful thing.
I mean, sure, it&#x27;s useful to be able to be able to talk about interfaces and relationships between types and functions, but I&#x27;d argue that typeclasses are a far more ergonomic solution to that problem.
A claim that I&#x27;ve heard was that they enable &amp;quot;programming in the large.&amp;quot;
This term is a reference to &lt;a href=&quot;https:&#x2F;&#x2F;doi.org&#x2F;10.1145&#x2F;800027.808431&quot;&gt;Programming-in-the-large versus Programming-in-the-small&lt;&#x2F;a&gt;.
From that paper:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;We argue that structuring a large collection of modules to form a &amp;quot;system&amp;quot; is
an essentially distinct and different intellectual activity from that of
constructing the individual modules. That is, we distinguish
programming-in-the-large from programming-in-the-small. Correspondingly, we
believe that essentially distinct and different languages should be used for
the two activities.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Programming_in_the_large_and_programming_in_the_small&quot;&gt;Wikipedia page about the paper&lt;&#x2F;a&gt; further references &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Ousterhout%27s_dichotomy&quot;&gt;Ousterhout&#x27;s dichotomy&lt;&#x2F;a&gt;, the idea that languages can be divided into glue languages and applications languages.
Ousterhout (the creator of Tcl) theorizes that useful, high-performing, correct programs can be assembled by using a glue language to combine several components written in applications languages.
Others have noticed a separation here as well; my favorite presentation is Ted Kaminski&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.tedinski.com&#x2F;2018&#x2F;03&#x2F;20&#x2F;wizarding-vs-engineering.html&quot;&gt;Programmer as wizard, programmer as engineer&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;goal&quot;&gt;Goal&lt;&#x2F;h1&gt;
&lt;p&gt;I feel like the major annoyances I have with ML-style modules are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;For many things that need modules in OCaml, typeclasses or &lt;a href=&quot;https:&#x2F;&#x2F;agda.readthedocs.io&#x2F;en&#x2F;v2.5.2&#x2F;language&#x2F;instance-arguments.html&quot;&gt;instance arguments&lt;&#x2F;a&gt; seem obviously superior (e.g. &lt;code&gt;Eq&lt;&#x2F;code&gt;, &lt;code&gt;Ord&lt;&#x2F;code&gt;, &lt;code&gt;Show&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;The interfaces between modules need to be designed to fit together, otherwise the resulting glue code is both tedious and unfortunately sometimes long.
And if you need to design the system ahead of time, why not just build software the &amp;quot;normal&amp;quot; way, with coupling between all your (non-external) components, ignoring the module language.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The former can obviously be solved by having typeclasses alongside modules.&lt;&#x2F;p&gt;
&lt;p&gt;The latter is the more interesting problem.
To take a narrative voice,&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Alice is writing CRUD endpoints for a service that exposes an HTTP API.
She needs to parse a &lt;code&gt;Foo&lt;&#x2F;code&gt; from a request and store it in the database, performing appropriate access validation checks.
She can simply write &lt;code&gt;{get-current-request parse-json store db}&lt;&#x2F;code&gt;, and the system will attempt to generate &amp;quot;reasonable&amp;quot; configurations.
TODO&lt;&#x2F;p&gt;
&lt;p&gt;Bob is performing a similar task without the tooling Alice has access to.
TODO&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
            </item>
        
            <item>
                <title>Initial Impressions: Jitsi vs Zoom</title>
                <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
                <link>https://remexre.xyz/jitsi-vs-zoom/</link>
                <guid>https://remexre.xyz/jitsi-vs-zoom/</guid>
                <description>&lt;p&gt;I&#x27;ve been using Zoom via the Linux client at work. Last night, I tried out Jitsi with some friends; my review is:&lt;&#x2F;p&gt;
&lt;p&gt;Pros:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Yay, Self-Hosting! A friend installed it on a DigitalOcean droplet in ~10 minutes. (Note that he already had a domain to add DNS records to.)&lt;&#x2F;li&gt;
&lt;li&gt;Nicer UI than zoom (subjectively)&lt;&#x2F;li&gt;
&lt;li&gt;Works in browser with no install on PC&lt;&#x2F;li&gt;
&lt;li&gt;Chat and hand-raising are easier to see in the UI&lt;&#x2F;li&gt;
&lt;li&gt;Rooms have names instead of numbers&lt;&#x2F;li&gt;
&lt;li&gt;There&#x27;s a pretty cool &lt;a href=&quot;https:&#x2F;&#x2F;remexre.xyz&#x2F;jitsi-vs-zoom&#x2F;blur-mode.png&quot;&gt;blur mode&lt;&#x2F;a&gt; for privacy, but it reduces the framerate of your video drastically, even on a powerful machine&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Cons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Seems to require more bandwidth? didn&#x27;t measure, but a friend on a slower inet connection who doesn&#x27;t usually have issues with zoom was breaking up on video and audio
&lt;ul&gt;
&lt;li&gt;Mitigation: there&#x27;s a separate low-bandwidth mode he turned on that made it easier to understand him&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;On Android, requires the app; I haven&#x27;t tried zoom on mobile though, so that might be same&lt;&#x2F;li&gt;
&lt;li&gt;Chat on mobile seems buggy (hard to close the UI, some things were overlapping on my device)&lt;&#x2F;li&gt;
&lt;li&gt;It looks like the only permissions are &amp;quot;is this client allowed by the server&amp;quot; rather than &amp;quot;is this user allowed to join this room&amp;quot;
&lt;ul&gt;
&lt;li&gt;Somewhat mitigated by it autogenerating high-entropy names for rooms, e.g. GrossBasketsSuspendSeriously&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;By default, there&#x27;s a watermark for guest users; this is allegedly easy to disable in the config, though.&lt;&#x2F;li&gt;
&lt;li&gt;Screensharing is relatively laggy; it&#x27;s fine for slides or coding, but it made streaming games to each other difficult&lt;&#x2F;li&gt;
&lt;li&gt;No push-to-talk. Zoom doesn&#x27;t support this on Linux either, but still a con.&lt;&#x2F;li&gt;
&lt;li&gt;No virtual backgrounds. A lot of people are asking for it though, and I conjecture that the code for blur mode could probably be extended without too much pain to provide this; hopefully it&#x27;ll be coming soon.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Mixed Pro&#x2F;Con:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There&#x27;s a concept of &amp;quot;the current speaker,&amp;quot; and everyone else has their mic quieter; this is nice when some people have slightly noisy backgrounds, but it makes it hard to interrupt someone&lt;&#x2F;li&gt;
&lt;li&gt;Instead of meetings you invite people to that start at a given time, there&#x27;s rooms anyone with the link can join at any time; though as far as I can tell, you can configure either one to act like the other&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Overall, Jitsi seems better for the case of &amp;quot;some friends chatting,&amp;quot; and probably for smaller meetings.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Pinebook Pro OSDev: Hello World</title>
                <pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate>
                <link>https://remexre.xyz/pbp-osdev/hello-world/</link>
                <guid>https://remexre.xyz/pbp-osdev/hello-world/</guid>
                <description>&lt;p&gt;I recently got a Pinebook Pro, and I want to port &lt;a href=&quot;https:&#x2F;&#x2F;remexre.xyz&#x2F;stahl&#x2F;dream&#x2F;#stahlos&quot;&gt;StahlOS&lt;&#x2F;a&gt; to it. The journey of a thousand miles begins with a single step, so here&#x27;s a journal entry on getting a &amp;quot;Hello, world&amp;quot; program running on it.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-hardware&quot;&gt;The Hardware&lt;&#x2F;h1&gt;
&lt;p&gt;This is written about (and largely on) the ANSI model of the &lt;a href=&quot;https:&#x2F;&#x2F;www.pine64.org&#x2F;pinebook-pro&#x2F;&quot;&gt;Pinebook Pro&lt;&#x2F;a&gt;. Additionally, I use a cable to access the serial port, which wires it up to a 3.5mm headphone jack physical connector. Pine sells a nicely packaged cable, but as people on the forums note (and I&#x27;ve verified), it runs at 5 volts, which causes spooky behavior (up to and including hardware damage) on the Pinebook. Instead, I&#x27;m using some jumpers spliced to a headphone cord I cut in half to provide the physical connector to the board.&lt;&#x2F;p&gt;
&lt;p&gt;Initially, I tried &lt;a href=&quot;https:&#x2F;&#x2F;www.adafruit.com&#x2F;product&#x2F;954&quot;&gt;Adafruit&#x27;s USB to TTL Serial Cable&lt;&#x2F;a&gt;, since I already had it sitting around. However, it turns out it&#x27;s based on the CP2102 chip, which only supports speeds up to 1Mbps (1000000 baud). The RK3399 (the board inside the Pinebook Pro), however, boots at 1.5Mbps (1500000 baud). Instead, I bought a converter based on the PL2302DX, which can do up to 12Mbps.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;out-of-the-box&quot;&gt;Out of the Box&lt;&#x2F;h1&gt;
&lt;p&gt;The Pinebook Pro ships with an ancient (oldstable?) version of Debian. I ditched it for Manjaro running off an SD card. From the default install, I &lt;code&gt;systemctl disable&lt;&#x2F;code&gt;d lightdm and installed i3 instead. I&#x27;m doing most of my usage (including typing this!) from the kernel console in tmux, though.&lt;&#x2F;p&gt;
&lt;p&gt;A hardware switch needs to be flipped inside the device to enable UART2, which provides a serial port over the headphone jack. The &lt;a href=&quot;https:&#x2F;&#x2F;wiki.pine64.org&#x2F;index.php&#x2F;Pinebook_Pro_Main_Page&quot;&gt;Pine wiki&lt;&#x2F;a&gt; documents the location of the switch fairly well; check it for &lt;a href=&quot;https:&#x2F;&#x2F;wiki.pine64.org&#x2F;index.php&#x2F;Pinebook_Pro_Main_Page#Pinebook_Pro_Internal_Layout&quot;&gt;pictures&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;u-boot&quot;&gt;U-Boot&lt;&#x2F;h1&gt;
&lt;p&gt;Once the serial port is connected, rebooting the machine shows the boot logs. Mashing Ctrl-C (or any key on the Manjaro U-Boot, it appears) gets a shell, with vaguely sh-like semantics.&lt;&#x2F;p&gt;
&lt;p&gt;I recommend updating to Manjaro&#x27;s U-Boot; the U-Boot the Pinebook Pro ships with (as of the January 2020 batch) can&#x27;t boot from 64-bit ELF files. If your machine boots with an amber power LED instead of a green one, that&#x27;s a strong indicator you&#x27;re on the newer Manjaro U-Boot.&lt;&#x2F;p&gt;
&lt;p&gt;The commands in the shell I find most useful are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bootelf&lt;&#x2F;code&gt;: Loads the ELF file at the given address, and jumps to its entrypoint.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;go&lt;&#x2F;code&gt;: Jumps to the given address. Useful when loading raw binaries (not ELFs).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;load&lt;&#x2F;code&gt;: Loads a file from a filesystem to an arbitrary address.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;loady&lt;&#x2F;code&gt;: Loads a file over the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;YMODEM&quot;&gt;ymodem protocol&lt;&#x2F;a&gt; to an arbitrary address.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;md&lt;&#x2F;code&gt;: Gives a hexdump of an arbitrary address. Note that it displays in little endian. Also callable as &lt;code&gt;md.b&lt;&#x2F;code&gt;, &lt;code&gt;md.w&lt;&#x2F;code&gt;, &lt;code&gt;md.l&lt;&#x2F;code&gt;, &lt;code&gt;md.q&lt;&#x2F;code&gt; to display with different widths for atoms of data.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;toolchain&quot;&gt;Toolchain&lt;&#x2F;h1&gt;
&lt;p&gt;You&#x27;ll need at least binutils for the &lt;code&gt;aarch64-none-elf&lt;&#x2F;code&gt; target. On Gentoo, this is fairly easy with &lt;a href=&quot;https:&#x2F;&#x2F;wiki.gentoo.org&#x2F;wiki&#x2F;Crossdev&quot;&gt;crossdev&lt;&#x2F;a&gt;. It&#x27;ll also probably be useful to have your system binutils be built multitarget; this doesn&#x27;t apply to &lt;code&gt;gas&lt;&#x2F;code&gt;, though, so the &lt;code&gt;aarch64-none-elf&lt;&#x2F;code&gt; versions are still necessary.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;writing-to-the-uart&quot;&gt;Writing to the UART&lt;&#x2F;h1&gt;
&lt;p&gt;The RK3399&#x27;s &lt;a href=&quot;http:&#x2F;&#x2F;opensource.rock-chips.com&#x2F;images&#x2F;e&#x2F;ee&#x2F;Rockchip_RK3399TRM_V1.4_Part1-20170408.pdf&quot;&gt;Technical Reference Manual&lt;&#x2F;a&gt; is your friend for all of this; it notes that UART2 is mapped to &lt;code&gt;0xff1a0000&lt;&#x2F;code&gt;. There&#x27;s also some information on how to interface with the chip; if you&#x27;re familar with programming the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;8250_UART&quot;&gt;8250&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;16550_UART&quot;&gt;16550&lt;&#x2F;a&gt; UARTs, I believe it&#x27;s effectively the latter. (Note that unlike how x86 serial ports are typically connected, the UARTs in the Pinebook Pro are all memory-mapped.)&lt;&#x2F;p&gt;
&lt;p&gt;We can write to the UART with an assembly sequence like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;ldr x0, =0xff1a0000 &#x2F;* Load the x0 register with 0xff1a0000 *&#x2F;
mov x1, &amp;#39;!&amp;#39;         &#x2F;* Load the x1 register with &amp;#39;!&amp;#39; (zero-extended) *&#x2F;
strb w1, [x0]       &#x2F;* Store the value in x1 to the address given by x0 *&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This stores the &lt;code&gt;!&lt;&#x2F;code&gt; character in the Transmit Holding Register of the UART. Technically, we need to wait for the Transmit Holding Register Empty Bit of the Line Status Register to be 1. We do this with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;	ldr x0, =0xff1a0000
wait_for_tx_ok:
	ldrb w1, [x0, #0x14]      &#x2F;* Offset the address in x0 by 0x14 *&#x2F;
	tbz w1, 5, wait_for_tx_ok &#x2F;* Loop if bit 5 of x1 is zero *&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Of course, a real OS should use the FIFOs, be interrupt-triggered, and maybe even use DMA. That&#x27;s outside the scope of this article, but I&#x27;ll probably touch on it in a future post.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;putting-it-all-together&quot;&gt;Putting it All Together&lt;&#x2F;h1&gt;
&lt;p&gt;We can use the above with a bit of glue code to make our &amp;quot;Hello, world&amp;quot; program:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.section .text

.global _start
_start:
	ldr x0, =0xff1a0000
	ldr x3, =msg
	mov x4, len
	bl write_string     &#x2F;* Call the write_string procedure *&#x2F;
	b .                 &#x2F;* Infinite loop *&#x2F;

&#x2F;** write_string: Writes a string to a UART
 *
 * Input:
 *   x0: UART base address
 *   x3: Address of first character of string
 *   x4: Length of string
 *
 * Side Effects:
 * - Trashes x1, x2, x5
 *&#x2F;
write_string:
	cbz x4, write_string.end &#x2F;* If x4 is zero, go to write_string.end *&#x2F;

write_string.wait_for_tx_ok:
	ldrb w1, [x0, #0x14]
	tbz w1, 5, write_string.wait_for_tx_ok

	ldrb w2, [x3], #1 &#x2F;* After fetching a byte to w2, increment x3 *&#x2F;
	sub x4, x4, 1     &#x2F;* Decrement x4 *&#x2F;
	strb w2, [x0]

	b write_string
write_string.end:
	ret

.section .rodata

msg: .string &amp;quot;Hello, world!\r\n&amp;quot;
.equ len, . - msg
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also need a linker script for this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f92672;&quot;&gt;OUTPUT_FORMAT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(elf64-littleaarch64)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;ENTRY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(_start)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;MEMORY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; {
	kernel : ORIGIN = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0x00280000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, LENGTH = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0x00080000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;SECTIONS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; {
	.text : {
		. += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;SIZEOF_HEADERS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
		*(.text)
	} &amp;gt; kernel
	.rodata : { *(.rodata) } &amp;gt; kernel
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We compile and link with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;aarch64-none-elf-as -o main.o main.s
aarch64-none-elf-ld -o main.elf -T linker.ld main.o -N -z max-page-size=4096
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;aside-tricks-for-a-smaller-executable&quot;&gt;Aside: Tricks for a Smaller Executable&lt;&#x2F;h2&gt;
&lt;p&gt;Thanks to &lt;code&gt;clever&lt;&#x2F;code&gt; and &lt;code&gt;doug16k&lt;&#x2F;code&gt; in the &lt;code&gt;#osdev&lt;&#x2F;code&gt; channel on Freenode for showing me a couple of tricks to reduce the size of the ELF file:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Adding &lt;code&gt;. += SIZEOF_HEADERS;&lt;&#x2F;code&gt; to the first section, and passing &lt;code&gt;-N&lt;&#x2F;code&gt; to &lt;code&gt;ld&lt;&#x2F;code&gt; lets LD overlap the &lt;code&gt;.text&lt;&#x2F;code&gt; section with the ELF header itself.&lt;&#x2F;li&gt;
&lt;li&gt;Passing &lt;code&gt;-z max-page-size=4096&lt;&#x2F;code&gt; to &lt;code&gt;ld&lt;&#x2F;code&gt; lets it only align the sections to 4k instead of 64k.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This brings the binary size down from 66k to 1.3k.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;hello-world&quot;&gt;Hello, world!&lt;&#x2F;h1&gt;
&lt;p&gt;Finally, we&#x27;re ready to run our program. Connect the Pinebook Pro to your serial port, connect Minicom to the serial port, and boot it. Hit a key to drop to the U-Boot shell, then run &lt;code&gt;loady 0x00880000&lt;&#x2F;code&gt; to start the upload. Hit Ctrl-A, S to open Minicom&#x27;s &amp;quot;Send files&amp;quot; menu. Once the file is uploaded, run &lt;code&gt;bootelf 0x00880000&lt;&#x2F;code&gt;. If all&#x27;s gone well, you should see &lt;code&gt;Hello, world!&lt;&#x2F;code&gt; printed, followed by the machine hanging.&lt;&#x2F;p&gt;
&lt;script id=&quot;asciicast-297430&quot; src=&quot;https:&#x2F;&#x2F;asciinema.org&#x2F;a&#x2F;297430.js&quot; async&gt;&lt;&#x2F;script&gt;
&lt;p&gt;&lt;noscript&gt;Click &lt;a href=&quot;https:&#x2F;&#x2F;asciinema.org&#x2F;a&#x2F;297430&quot;&gt;here&lt;&#x2F;a&gt; to view screen recording (powered by asciinema).&lt;&#x2F;noscript&gt;&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>The StahlDream</title>
                <pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate>
                <link>https://remexre.xyz/stahl/dream/</link>
                <guid>https://remexre.xyz/stahl/dream/</guid>
                <description>&lt;p&gt;The StahlDream is the shorthand I use for constructing a personal computing system, from the hardware up. This encompasses several programming languages, an operating system, at least two databases. (And that&#x27;s before I get to any actual applications.)&lt;&#x2F;p&gt;
&lt;p&gt;I realized I don&#x27;t actually have all this written down in one place anywhere, so this serves as a snapshot into the current vision.&lt;&#x2F;p&gt;
&lt;p&gt;This is certainly inspired by &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Oberon_(operating_system)&quot;&gt;Oberon&lt;&#x2F;a&gt;, which showed one could create a single-machine system in a few thousand lines of code (12,227 by &lt;a href=&quot;http:&#x2F;&#x2F;www.edm2.com&#x2F;0608&#x2F;oberon.html&quot;&gt;one count&lt;&#x2F;a&gt;). I don&#x27;t think I can fit a system in so few lines of code, but I also want to have a much more complicated language in use for most of the system.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;stahlos&quot;&gt;StahlOS&lt;&#x2F;h1&gt;
&lt;p&gt;The part I&#x27;m currently working on is an operating system on which the rest of the system runs. The system is quite minimal — there&#x27;s neither MMU-based process isolation, nor pre-emptive multitasking (though the latter point may change).&lt;&#x2F;p&gt;
&lt;p&gt;The StahlOS model fundamentally relies on all actual machine code executed by the CPU to be trustworthy, and disallows loading binaries other than the kernel itself. Instead, system drivers and essential processes are written in &lt;a href=&quot;https:&#x2F;&#x2F;remexre.xyz&#x2F;stahl&#x2F;dream&#x2F;#stahlos-forth&quot;&gt;StahlOS Forth&lt;&#x2F;a&gt;, which user programs are compiled to at runtime. Even the Forth programs themselves are only loadable from a read-only filesystem (excepting those that are compiled into the kernel), since Forth is low-level enough that it might as well be machine code, security-wise.&lt;&#x2F;p&gt;
&lt;p&gt;Each of the compiler processes only produce memory-safe code; assuming this property and the correctness of the above TCB, all code the system can run is memory-safe. This allows wholly ignoring the MMU as a security mechanism. Instead, memory ownership is implicit, and controlled at the page level. Each process (with exceptions such as a low-level debugging REPL) is shared-nothing, with message-passing as a fundamental operation, implemented as the transfer of page ownership. (I haven&#x27;t ruled out eventually allowing shared pages with &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Software_transactional_memory&quot;&gt;STM&lt;&#x2F;a&gt; or similar for concurrent modification, but I&#x27;m leery of shared pointers.)&lt;&#x2F;p&gt;
&lt;p&gt;StahlOS will also provide Erlang-like mechanisms for orchestrating processes (i.e. monitors and links). However, cross-machine message-passing will not be directly supported (and for this reason, message-passing should only really be considered a intra-app mechanism, despite being inter-process). Instead, applications should generally use the &lt;a href=&quot;https:&#x2F;&#x2F;remexre.xyz&#x2F;stahl&#x2F;dream&#x2F;#tuple-space&quot;&gt;tuple space&lt;&#x2F;a&gt; as a synchronization point: it&#x27;s not significantly more expensive than message passing for local communications, but allows remote communications.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;stahl&quot;&gt;Stahl&lt;&#x2F;h2&gt;
&lt;p&gt;The primary language being designed currently, and the most complicated one by far, is Stahl. Stahl is a dependently typed lambda calculus with a Lisp-like syntax.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m probably basing the core type theory on the type theory presented in &lt;a href=&quot;https:&#x2F;&#x2F;homotopytypetheory.org&#x2F;book&#x2F;&quot;&gt;Homotopy Type Theory&lt;&#x2F;a&gt;, but without the univalence axiom (at least, until I can figure out how to make it computable).&lt;&#x2F;p&gt;
&lt;p&gt;I also want to make the language the testbed for experimenting with automated theorem proving and making manual theorem proving convenient in a &amp;quot;casual&amp;quot; setting (e.g. from a smartphone while on a bus).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;stahlos-forth&quot;&gt;StahlOS Forth&lt;&#x2F;h2&gt;
&lt;p&gt;StahlOS uses a Forth dialect as the low-level programming language. &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Forth_(programming_language)&quot;&gt;Forth&lt;&#x2F;a&gt; is the best language I&#x27;ve found for bare-metal development. A Forth system can be constructed with amazingly little machine code; the resulting language is capable of Common Lisp-tier metaprogramming, while also being able to peek and poke at memory, without needing dynamic memory allocation.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;databases&quot;&gt;Databases&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;tuple-space&quot;&gt;Tuple Space&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Tuple_space&quot;&gt;Tuple spaces&lt;&#x2F;a&gt; are a sufficiently old, and sufficiently nice-seeming database abstraction that I&#x27;m honestly surprised there isn&#x27;t a high-quality implementation some programming subculture is smugly using (in same way similar subcultures exist for e.g. Smalltalk, Erlang, Common Lisp).&lt;&#x2F;p&gt;
&lt;p&gt;Essentially, a tuple space is a distributed multiset with five primitive operations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;put TUPLE&lt;&#x2F;code&gt; adds a tuple to the multiset&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;try-take PATTERN&lt;&#x2F;code&gt; returns a tuple matching &lt;code&gt;PATTERN&lt;&#x2F;code&gt; if one exists in the multiset, removing it from the multiset&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;try-peek PATTERN&lt;&#x2F;code&gt; returns a tuple matching &lt;code&gt;PATTERN&lt;&#x2F;code&gt; if one exists in the multiset, without removing it from the multiset&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;take PATTERN, TIMEOUT&lt;&#x2F;code&gt; returns a tuple matching &lt;code&gt;PATTERN&lt;&#x2F;code&gt; if one can be found within &lt;code&gt;TIMEOUT&lt;&#x2F;code&gt;, removing it from the multiset&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;peek PATTERN, TIMEOUT&lt;&#x2F;code&gt; returns a tuple matching &lt;code&gt;PATTERN&lt;&#x2F;code&gt; if one can be found within &lt;code&gt;TIMEOUT&lt;&#x2F;code&gt;, without removing it from the multiset&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With a sufficiently expressive pattern language, it becomes easy to have applications sharing a database with loose coupling between them.&lt;&#x2F;p&gt;
&lt;p&gt;I need more design work to determine many of the details of this tuple space (as well as a name for it!) — particularly, I&#x27;m unsure of how precisely I want to make the database distributed. Given that I&#x27;m using it as a coordination mechanism as well as a (short-term) database, it&#x27;s not clear what semantics I actually want on netsplit. Furthermore, it seems like there ought to be a large class of optimizations I could apply to make common patterns of use more efficient, though these might require real-world usage data to evaluate.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;g1&quot;&gt;G1&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m already writing about G1 &lt;a href=&quot;https:&#x2F;&#x2F;remexre.xyz&#x2F;g1&#x2F;intro&#x2F;&quot;&gt;elsewhere&lt;&#x2F;a&gt; on this blog, but I&#x27;ll summarize how it fits into the larger StahlDream.&lt;&#x2F;p&gt;
&lt;p&gt;The tuple space doesn&#x27;t seem particularly good as a database for bulk storage — I&#x27;m planning to implement it with the expectation that it will contain at most a few megabytes of data at once. I therefore want a flexible database for storing and querying larger data.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m planning to implement the tuple space on top of both StahlOS and some Linux system, likely with the Linux implementation being in Rust. The thinking here is somewhat similar to Erlang&#x27;s port drivers, which allow interfacing with a native-code process as if it were an Erlang process. G1 can then be easily bridged to StahlOS, by acting on the tuple space directly.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>G1: The Query Language</title>
                <pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate>
                <link>https://remexre.xyz/g1/query-lang/</link>
                <guid>https://remexre.xyz/g1/query-lang/</guid>
                <description>&lt;p&gt;&lt;em&gt;This post assumes you&#x27;ve read the &lt;a href=&quot;https:&#x2F;&#x2F;remexre.xyz&#x2F;g1&#x2F;intro&#x2F;&quot;&gt;previous one in the series&lt;&#x2F;a&gt;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The G1 query language is a variant of Datalog, a sound subset of Prolog whose properties make it a useful query language. Datalog queries are provably terminating in polynomial time (with respect to the size of the DB), and can be analyzed and optimized ahead of time for significant speed boosts.&lt;&#x2F;p&gt;
&lt;p&gt;G1&#x27;s implementation is unusual largely in that there exists both a parser for strings of Datalog source code and a parser that operates on Rust tokens, and also allows interpolation, for use in a procedural macro.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;syntax&quot;&gt;Syntax&lt;&#x2F;h1&gt;
&lt;p&gt;The G1 grammar is (somewhat informally) as follows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;&amp;lt;query&amp;gt; ::= &amp;lt;clause&amp;gt;* &amp;quot;?-&amp;quot; &amp;lt;predicate&amp;gt; &amp;quot;.&amp;quot;

&amp;lt;clause&amp;gt; ::= &amp;lt;predicate&amp;gt; &amp;quot;.&amp;quot;
&amp;lt;clause&amp;gt; ::= &amp;lt;predicate&amp;gt; &amp;quot;:-&amp;quot; commaSeparated1(&amp;lt;possiblyNegatedPredicate&amp;gt;) &amp;quot;.&amp;quot;

&amp;lt;possiblyNegatedPredicate&amp;gt; ::= &amp;lt;predicate&amp;gt;
&amp;lt;possiblyNegatedPredicate&amp;gt; ::= &amp;quot;!&amp;quot; &amp;lt;predicate&amp;gt;

&amp;lt;predicate&amp;gt; ::= &amp;lt;var&amp;gt; &amp;quot;(&amp;quot; commaSeparated(&amp;lt;value&amp;gt;) &amp;quot;)&amp;quot;

&amp;lt;value&amp;gt; ::= &amp;quot;_&amp;quot;
&amp;lt;value&amp;gt; ::= &amp;lt;string&amp;gt;
&amp;lt;value&amp;gt; ::= &amp;lt;var&amp;gt;

&amp;lt;string&amp;gt; ::= &amp;#39;&amp;quot;&amp;#39; &amp;lt;stringChar&amp;gt;* &amp;#39;&amp;quot;&amp;#39;

&amp;lt;var&amp;gt; ::= &amp;quot;&amp;#39;&amp;quot; &amp;lt;stringChar&amp;gt;* &amp;quot;&amp;#39;&amp;quot;
&amp;lt;var&amp;gt; ::= &#x2F;[A-Za-z][0-9A-Za-z_]*&#x2F;

&amp;lt;stringChar&amp;gt; ::= any printable character other than &amp;quot;&amp;#39;&amp;quot;, &amp;#39;&amp;quot;&amp;#39;, or &amp;quot;\&amp;quot;
&amp;lt;stringChar&amp;gt; ::= &amp;quot;\&amp;quot; &amp;lt;escChar&amp;gt;

&amp;lt;escChar&amp;gt; ::= &amp;quot;\&amp;quot;
&amp;lt;escChar&amp;gt; ::= &amp;quot;&amp;#39;&amp;quot;
&amp;lt;escChar&amp;gt; ::= &amp;#39;&amp;quot;&amp;#39;
&amp;lt;escChar&amp;gt; ::= &amp;quot;n&amp;quot;
&amp;lt;escChar&amp;gt; ::= &amp;quot;r&amp;quot;
&amp;lt;escChar&amp;gt; ::= &amp;quot;t&amp;quot;

commaSeparated(NT) ::=
commaSeparated1(NT) ::= commaSeparated1(NT)

commaSeparated1(NT) ::= NT
commaSeparated1(NT) ::= commaSeparated1(NT) &amp;quot;,&amp;quot; NT
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that unlike Prolog, Datalog doesn&#x27;t allow functors as values (i.e. &lt;code&gt;foo(1, bar(2))&lt;&#x2F;code&gt; is not a predicate). Also of note is the G1 query language&#x27;s choices regarding strings -- double quotes are &lt;strong&gt;always&lt;&#x2F;strong&gt; used for strings, and unquoted and single-quoted symbols are &lt;strong&gt;always&lt;&#x2F;strong&gt; variables. This differs significantly from Prolog, which uses case to disambiguate between variables and atoms.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;string-parser&quot;&gt;String Parser&lt;&#x2F;h2&gt;
&lt;p&gt;The parser for strings is able to be a fairly traditional LALR parser, using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lalrpop&#x2F;lalrpop&quot;&gt;LALRPOP&lt;&#x2F;a&gt; as a parser generator and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;maciejhirsz&#x2F;logos&quot;&gt;Logos&lt;&#x2F;a&gt; as a lexer generator. This parser is rather straightforward, so there&#x27;s not much more to say about it here.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;proc-macro-parser&quot;&gt;Proc Macro Parser&lt;&#x2F;h2&gt;
&lt;p&gt;The parser for the &lt;code&gt;query!()&lt;&#x2F;code&gt; macro is more complex, because it needs to operate on Rust tokens. So that macros don&#x27;t need to break compatibility with future Rust syntax changes, procedural macros receive a &lt;code&gt;TokenStream&lt;&#x2F;code&gt; type, which is an iterator of &lt;code&gt;TokenTree&lt;&#x2F;code&gt;s.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;code&gt;TokenTree&lt;&#x2F;code&gt; is either a token (an identifier, literal, or piece of punctuation) or a bracket-delimited &lt;code&gt;TokenStream&lt;&#x2F;code&gt;. This is reasonably easy to parse with a hand-written recursive-descent parser, but it doesn&#x27;t fit well with LALRPOP. The &lt;code&gt;g1_macros&lt;&#x2F;code&gt; crate therefore defines a &lt;code&gt;Token&lt;&#x2F;code&gt; type that represents a single token, with delimiters explicitly present.&lt;&#x2F;p&gt;
&lt;p&gt;For example, the Rust tokens&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#66d9ef;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(bar, baz, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;).
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;become the &lt;code&gt;TokenStream&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;TokenStream::from(vec![
	TokenTree::Ident(Ident::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, Span::call_site())),
	TokenTree::Group(Group::new(Delimiter::Parenthesis, TokenStream::from(vec![
		TokenTree::Ident(Ident::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;bar&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, Span::call_site())),
		TokenTree::Punct(Punct::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, Spacing::Alone)),
		TokenTree::Ident(Ident::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;baz&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, Span::call_site())),
		TokenTree::Punct(Punct::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, Spacing::Alone)),
		TokenTree::Ident(Ident::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;_&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, Span::call_site())),
	]))),
	TokenTree::Punct(Punct::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;.&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, Spacing::Alone)),
])
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which in turn becomes the &lt;code&gt;Vec&amp;lt;Token&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;vec![
	Token::Ident(Ident::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, Span::call_site())),
	Token::ParenOpen(Span::call_site()),
	Token::Ident(Ident::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;bar&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, Span::call_site())),
	Token::Punct(Punct::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, Spacing::Alone)),
	Token::Ident(Ident::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;baz&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, Span::call_site())),
	Token::Punct(Punct::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, Spacing::Alone)),
	Token::Hole(Span::call_site()),
	Token::ParenClose(Span::call_site()),
	Token::Punct(Punct::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;.&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, Spacing::Alone)),
]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that since we use Rust&#x27;s lexer, the &lt;code&gt;query!()&lt;&#x2F;code&gt; proc macro will inherit e.g. Rust&#x27;s string escapes (which are a superset of the ones the string parser&#x27;s lexer supports). Additionally, quoted symbols are not supported, since they conflict with Rust&#x27;s character literals.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;semantic-analysis&quot;&gt;Semantic Analysis&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;restrictions&quot;&gt;Restrictions&lt;&#x2F;h2&gt;
&lt;p&gt;In order to maintain Datalog&#x27;s properties, two restrictions hold for G1 queries. Both of the restrictions are based around ensuring the following statement is true:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Datalog program can be evaluated bottom-up and incrementally, in finite time.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;positivity&quot;&gt;Positivity&lt;&#x2F;h3&gt;
&lt;p&gt;The positivity restriction ensures a clause always computes a finite number of tuples of strings (i.e. without them containing variables).&lt;&#x2F;p&gt;
&lt;p&gt;Examples of violating clauses include:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Disallowed, since this computes the set of all strings, which is infinite.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;alwaysSucceeds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;.

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Disallowed, since the complement of a finite set is infinite.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;red&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;green&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;blue&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;notColor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:- !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It turns out there&#x27;s a simple rule we can use to check this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every variable that either appears in the head of the clause or in a negative call must also appear in a positive call.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Currently, a negative call is negated (i.e., uses the &lt;code&gt;!&lt;&#x2F;code&gt; operator), and a positive call is non-negated. This isn&#x27;t true of all Datalog variants (nor of other Prolog-like languages) in general, but in the G1 query language this definition holds.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stratification&quot;&gt;Stratification&lt;&#x2F;h3&gt;
&lt;p&gt;The stratification restriction gives an order for evaluating bottom-up and ensures a clause can be evaluated in finite time, by disallowing some forms of recursion. We want to disallow clauses like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Inherently paradoxical.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;paradox&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:- !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;paradox&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;.

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Could require infinite deductions.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, we want to be able to preserve recursion like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; A bit useless, but still well-defined.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;.

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; This is well-defined, and even useful.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;atom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;Z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;edge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;Y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;Y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;Z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It turns out the procedure for ensuring that recursion is well-behaved is fairly simple. Each clause name is assigned an index, and the recursion is judged to be well-behaved if:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If any clause with the name &lt;code&gt;i&lt;&#x2F;code&gt; calls the name &lt;code&gt;j&lt;&#x2F;code&gt; (including recursively), &lt;code&gt;i &amp;lt;= j&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;If any clause with the name &lt;code&gt;i&lt;&#x2F;code&gt; calls the negation of the name &lt;code&gt;j&lt;&#x2F;code&gt; (including recursively), &lt;code&gt;i &amp;lt; j&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;(As an implementation note: we define the names as signed integers, assigning only non-negative ones to user-defined predicates, and negative ones to built-in predicates.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;Since we have multiple &amp;quot;first-level ASTs,&amp;quot; we use the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Visitor_pattern&quot;&gt;visitor pattern&lt;&#x2F;a&gt; to hide some of the more annoying bits (assigning indices to names, deduplicating strings, etc.).&lt;&#x2F;p&gt;
&lt;p&gt;These visitors directly assign stratification indices using &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;topological-sort&quot;&gt;the &lt;code&gt;topological-sort&lt;&#x2F;code&gt; crate&lt;&#x2F;a&gt;. It only supports &lt;code&gt;&amp;lt;&lt;&#x2F;code&gt; bounds (rather than &lt;code&gt;&amp;lt;=&lt;&#x2F;code&gt;), so a simple test for self-recursion is needed, which fails for negated self-recursion.&lt;&#x2F;p&gt;
&lt;p&gt;The positivity test is then easy to define on the resulting &lt;code&gt;VerifiedQuery&lt;&#x2F;code&gt; AST.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;At this point we have in hand a parser and validator for G1 queries, but not yet any way to evaluate them. While doing so is fairly easy (assuming we have the database contents easily accessible), it&#x27;s also unusably slow.  Next time, I&#x27;ll go through the &lt;a href=&quot;https:&#x2F;&#x2F;remexre.xyz&#x2F;g1&#x2F;magic-sets&#x2F;&quot;&gt;magic sets transformation&lt;&#x2F;a&gt;, which makes evaluation significantly more efficient.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Stahl in 2020</title>
                <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
                <link>https://remexre.xyz/stahl/2020/</link>
                <guid>https://remexre.xyz/stahl/2020/</guid>
                <description>&lt;p&gt;This is a quick roadmap for the Stahl project(s) in (at least the beginning of) 2020. I&#x27;ve been slowly reading &lt;a href=&quot;https:&#x2F;&#x2F;homotopytypetheory.org&#x2F;book&#x2F;&quot;&gt;Homotopy Type Theory&lt;&#x2F;a&gt; over the last week, and I&#x27;m getting a &lt;a href=&quot;https:&#x2F;&#x2F;www.pine64.org&#x2F;pinebook-pro&#x2F;&quot;&gt;Pinebook Pro&lt;&#x2F;a&gt; as a hackable dev platform.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;&#x2F;h1&gt;
&lt;p&gt;Stahl (Language):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Stahl Core interpreter&lt;&#x2F;li&gt;
&lt;li&gt;Stahl Core compiler&lt;&#x2F;li&gt;
&lt;li&gt;Properly grok higher-order pattern unification&lt;&#x2F;li&gt;
&lt;li&gt;Write Stahl to Stahl Core conversion&lt;&#x2F;li&gt;
&lt;li&gt;Proper Stahl frontend&lt;&#x2F;li&gt;
&lt;li&gt;Linux Runtime&lt;&#x2F;li&gt;
&lt;li&gt;GRIN backend&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;StahlOS:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rewrite&#x2F;port StahlOS for Pinebook Pro&lt;&#x2F;li&gt;
&lt;li&gt;Spawn driver and process for serial console on UART&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;stahl-core&quot;&gt;Stahl Core&lt;&#x2F;h1&gt;
&lt;p&gt;The Stahl surface syntax is translated down to a simpler intermediate language, Stahl Core. Stahl Core uses an intensional constructive type theory. Currently, I don&#x27;t think I can make it completely HoTT-friendly, since I&#x27;m not sure how to compute with the univalence axiom, but if that changes it probably will be. Lastly, &amp;quot;normal universes&amp;quot; are explicitly indexed with ordinals, which inhabit their own universe, &lt;code&gt;Ordinal&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;d like to also introduce the tricks from &lt;a href=&quot;http:&#x2F;&#x2F;jmchapman.github.io&#x2F;papers&#x2F;levitation.pdf&quot;&gt;The Gentle Art of Levitation&lt;&#x2F;a&gt;, so its &lt;code&gt;Tag&lt;&#x2F;code&gt; and &lt;code&gt;Desc&lt;&#x2F;code&gt; will likely make an appearance in some form. (&lt;code&gt;Tag&lt;&#x2F;code&gt;, in particular, I&#x27;m likely to rename to &lt;code&gt;Atom&lt;&#x2F;code&gt;.)&lt;&#x2F;p&gt;
&lt;h1 id=&quot;stahlos&quot;&gt;StahlOS&lt;&#x2F;h1&gt;
&lt;p&gt;Since the Pinebook Pro is such a well-documented machine, I want to switch to porting StahlOS to it, rather than continuing to not work on it for amd64. The current codebase is basically blocked on my not wanted to grok ACPI; &lt;a href=&quot;https:&#x2F;&#x2F;www.devicetree.org&#x2F;&quot;&gt;DeviceTrees&lt;&#x2F;a&gt; seem much saner, and the RK3399 (the SoC the Pinebook Pro uses) looks like it has static addresses for its peripherals (e.g. the serial port is at a fixed physical address of &lt;code&gt;0xff1a0000&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>G1: A simple graph store, written in Rust</title>
                <pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>
                <link>https://remexre.xyz/g1/intro/</link>
                <guid>https://remexre.xyz/g1/intro/</guid>
                <description>&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;&#x2F;h1&gt;
&lt;p&gt;Over the next few weeks&#x2F;months, I&#x27;m planning to implement a graph store in Rust, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;remexre&#x2F;g1&quot;&gt;G1&lt;&#x2F;a&gt;. I mainly want to do this because &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;mentat&quot;&gt;mentat&lt;&#x2F;a&gt; became unmaintained, and I like the idea of Datalog as a database query language. Implementing a database also seems like a reasonable enough way to learn about one.&lt;&#x2F;p&gt;
&lt;p&gt;I also want a &amp;quot;database of everything&amp;quot; at some point -- a single database I put all my information into, and can query against in a single, unified way. (This also ties into &lt;a href=&quot;https:&#x2F;&#x2F;remexre.xyz&#x2F;stahl&#x2F;dream&#x2F;&quot;&gt;the Stahl project&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;h1 id=&quot;data-model&quot;&gt;Data Model&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;strong&gt;Atoms&lt;&#x2F;strong&gt;: Atoms are the nodes of the graph. Each is represented as a UUID.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Names&lt;&#x2F;strong&gt;: Names uniquely identify an Atom. They have a namespace and a title, both of which are Strings.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Edges&lt;&#x2F;strong&gt;: Edges are directed, with an Atom at both endpoints. Edges have a String label associated with them. At most one edge between two Atoms with a given label may exist.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Attributes&lt;&#x2F;strong&gt;: Attributes are attached to Atoms. They have a key and a value, both of which are Strings.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Blobs&lt;&#x2F;strong&gt;: Blobs are attached to Atoms. They have a kind, which is a String; a type, which is a MIME type; and contents, which are an arbitrarily large binary string. Blobs are referred to by a SHA256 hash.&lt;&#x2F;p&gt;
&lt;p&gt;Strings are UTF-8 strings, which should be no longer than 256 bytes.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;query-language&quot;&gt;Query Language&lt;&#x2F;h1&gt;
&lt;p&gt;The query language is a variant of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Datalog&quot;&gt;Datalog&lt;&#x2F;a&gt;. Datalog can be very efficient to evaluate, and complex queries are (in my opinion) much easier to read than similar SQL queries. It also expresses queries on graphs very naturally.&lt;&#x2F;p&gt;
&lt;p&gt;An example of a query:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#a6e22e;&quot;&gt;friend&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(Me&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; You) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:-
	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;edge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(Me&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; You&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;friend&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;.

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;friendOfFriend&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(Me&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; You) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:-
	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;friend&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(Me&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; Other)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;,
	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;friend&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(Other&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; You)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;.

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;sameAtom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;atom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;.

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;frenemyName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(Me&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; YourName) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:-
	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;friendOfFriend&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(Me&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; You)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;,
	! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;friend&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(Me&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; You)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;,
	! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;sameAtom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(Me&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; You)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;,
	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(You&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;name&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; YourName)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;.

?- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;frenemyName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;59760f34-eee0-44e2-9358-f48d46c686ee&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; YourName)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This query finds the names of the friends of the friends of the user represented by the atom with a UUID of &lt;code&gt;59760f34-eee0-44e2-9358-f48d46c686ee&lt;&#x2F;code&gt;, excluding that user and their direct friends. I&#x27;ll describe the language more fully in a later post.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;roadmap&quot;&gt;Roadmap&lt;&#x2F;h1&gt;
&lt;p&gt;Currently, I&#x27;m tracking work on the implementation in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;remexre&#x2F;g1&#x2F;issues&quot;&gt;GitHub Issues&lt;&#x2F;a&gt;, but note that at the time of writing, these issues are in the context of a laughably unoptimized implementation on top of SQLite.&lt;&#x2F;p&gt;
&lt;p&gt;In terms of the blog posts, I&#x27;m thinking of roughly the order:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;remexre.xyz&#x2F;g1&#x2F;query-lang&#x2F;&quot;&gt;G1&#x27;s Query Language&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;remexre.xyz&#x2F;g1&#x2F;disk&#x2F;&quot;&gt;How G1 Stores Data On Disk&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;remexre.xyz&#x2F;g1&#x2F;magic-sets&#x2F;&quot;&gt;The Magic Sets Transformation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;How G1 Stores Data In Memory&lt;&#x2F;li&gt;
&lt;li&gt;Implementing Transactions in G1&lt;&#x2F;li&gt;
&lt;li&gt;Ensuring Crash-Safety in G1&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Reboot of the Blog, again!</title>
                <pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate>
                <link>https://remexre.xyz/reboot/</link>
                <guid>https://remexre.xyz/reboot/</guid>
                <description>&lt;p&gt;Only 11 months less a day between posts, this time!&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m restarting the blog, again. All the old content is still on GitHub, on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;remexre&#x2F;remexre.github.io&#x2F;tree&#x2F;authoring-old-2019-01-14&quot;&gt;the &lt;code&gt;authoring-old-2019-01-14&lt;&#x2F;code&gt; branch&lt;&#x2F;a&gt;. The real reason is that upstream changes to Zola broke a template I wasn&#x27;t really using anyway, and I&#x27;ve been putting off fixing it.&lt;&#x2F;p&gt;
&lt;p&gt;I actually have a few things to blog about planned out, this time. Expect:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A project to allow more ergonomic FFI between Rust and Lisp&#x2F;Python&lt;&#x2F;li&gt;
&lt;li&gt;Notes about a simple graph store from scratch in Rust&lt;&#x2F;li&gt;
&lt;li&gt;Read-throughs of academic papers, usually related to some project&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Hopefully, I&#x27;ll finish at least one post a month this time...&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Helpful Tools for CSCI2021</title>
                <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
                <link>https://remexre.xyz/umn/csci2021-helpful-tools/</link>
                <guid>https://remexre.xyz/umn/csci2021-helpful-tools/</guid>
                <description>&lt;h1 id=&quot;radare2&quot;&gt;radare2&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;rada.re&#x2F;r&#x2F;&quot;&gt;radare2&lt;&#x2F;a&gt; can replace GDB, and has many more analysis tools.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing&quot;&gt;Installing&lt;&#x2F;h2&gt;
&lt;p&gt;Check your repos. It&#x27;s in the repos for Arch, Ubuntu, and Homebrew (for you macOS kids).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example-of-usage&quot;&gt;Example of Usage&lt;&#x2F;h2&gt;
&lt;p&gt;Start radare2 with &lt;code&gt;radare2 -d &amp;lt;program&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Radare2 has very terse commands, unlike GDB. Reading a tutorial is &lt;em&gt;highly&lt;&#x2F;em&gt;, &lt;strong&gt;highly&lt;&#x2F;strong&gt;, &lt;em&gt;&lt;strong&gt;highly&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; recommended; try &lt;a href=&quot;http:&#x2F;&#x2F;sushant94.me&#x2F;2015&#x2F;05&#x2F;31&#x2F;Introduction_to_radare2&#x2F;&quot;&gt;this one&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;However, here&#x27;s a cool demo of one of the more useful things. Load your bomblab file with the above commands.&lt;&#x2F;p&gt;
&lt;p&gt;Then run the commands:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;aaa
VV @ sym.initialize_bomb
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can now use the arrow keys or Vim-style &lt;code&gt;hjkl&lt;&#x2F;code&gt; scrolling to pan around the control-flow graph of your bomb.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;remexre.xyz&#x2F;umn&#x2F;csci2021-helpful-tools&#x2F;radare2-cfg.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;godbolt&quot;&gt;godbolt&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gcc.godbolt.org&#x2F;&quot;&gt;godbolt&lt;&#x2F;a&gt; is a useful online tool for reading the assembly output of C code. It highlights the lines different blocks of assembly come from too, which makes reading it much easier.&lt;&#x2F;p&gt;
&lt;p&gt;Protip: Use &lt;code&gt;-O1&lt;&#x2F;code&gt; in the &amp;quot;Compiler Flags&amp;quot; field -- it makes the code a lot more efficient without sacrificing much readability (and sometimes improving it).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;remexre.xyz&#x2F;umn&#x2F;csci2021-helpful-tools&#x2F;godbolt-o1-example.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;clang&quot;&gt;clang&lt;&#x2F;h1&gt;
&lt;p&gt;Clang gives much better error messages than GCC. Just replace gcc in your commands with clang. It&#x27;s the default C compiler on macOS, and is installed on the CSELabs machines (and again is probably in your standard repos).&lt;&#x2F;p&gt;
&lt;p&gt;For example, instead of:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;gcc -o main main.c
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;run&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;clang -o main main.c
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;useful-flags&quot;&gt;Useful flags&lt;&#x2F;h2&gt;
&lt;p&gt;Other flags that can check your code include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-Wall&lt;&#x2F;code&gt; -- add more warnings for incorrect (and likely to crash) code&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-g&lt;&#x2F;code&gt; -- emit debug information into the program, so you can debug it easier&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;valgrind&quot;&gt;valgrind&lt;&#x2F;h1&gt;
&lt;p&gt;Valgrind can help find the causes of segmentation faults and memory leaks a lot better than most programmers. Run your program with it to find them.&lt;&#x2F;p&gt;
&lt;p&gt;For example, instead of:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.&#x2F;main
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;run&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;valgrind .&#x2F;main
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;installing-1&quot;&gt;Installing&lt;&#x2F;h2&gt;
&lt;p&gt;Check your repos.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reading-valgrind-s-output&quot;&gt;Reading Valgrind&#x27;s output&lt;&#x2F;h2&gt;
&lt;p&gt;After running valgrind, you might get output like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;==30038== Memcheck, a memory error detector
==30038== Copyright (C) 2002-2017, and GNU GPL&amp;#39;d, by Julian Seward et al.
==30038== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==30038== Command: .&#x2F;a.out
==30038==
==30038== Invalid read of size 1
==30038==    at 0x108611: main (main.c:3)
==30038==  Address 0x0 is not stack&amp;#39;d, malloc&amp;#39;d or (recently) free&amp;#39;d
==30038==
==30038==
==30038== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==30038==  Access not within mapped region at address 0x0
==30038==    at 0x108611: main (main.c:3)
==30038==  If you believe this happened as a result of a stack
==30038==  overflow in your program&amp;#39;s main thread (unlikely but
==30038==  possible), you can try to increase the size of the
==30038==  main thread stack using the --main-stacksize= flag.
==30038==  The main thread stack size used in this run was 8388608.
==30038==
==30038== HEAP SUMMARY:
==30038==     in use at exit: 0 bytes in 0 blocks
==30038==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==30038==
==30038== All heap blocks were freed -- no leaks are possible
==30038==
==30038== For counts of detected and suppressed errors, rerun with: -v
==30038== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
[1]    30038 segmentation fault (core dumped)  valgrind .&#x2F;a.out
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This may look difficult to read, but the important part is the middle section:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#f8f8f2;&quot;&gt;==30038== Invalid read of size 1
==30038==    at 0x108611: main (main.c:3)
==30038==  Address 0x0 is not stack&amp;#39;d, malloc&amp;#39;d or (recently) free&amp;#39;d
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s break this down line-by-line.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Invalid read of size 1&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The error in your program is that it tried to read one byte from memory in a way that was invalid.&lt;&#x2F;p&gt;
&lt;p&gt;The only common one-byte type is a char, so we can be pretty sure that it was that.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;at 0x108611: main (main.c:3)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can ignore &lt;code&gt;0x108611&lt;&#x2F;code&gt; -- it&#x27;s the memory address the code was at. If it&#x27;s the only piece of information present, you might&#x27;ve tried to call a string as a function or something similar. Otherwise, the other two pieces of information are much more useful.&lt;&#x2F;p&gt;
&lt;p&gt;We know that it&#x27;s in the &lt;code&gt;main&lt;&#x2F;code&gt; function, specifically at line 3 of &lt;code&gt;main.c&lt;&#x2F;code&gt;. If a line number isn&#x27;t present, compile your program with &lt;code&gt;-g&lt;&#x2F;code&gt; and run it again.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Address 0x0 is not stack&#x27;d, malloc&#x27;d or (recently) free&#x27;d&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;From this, we know that the memory address we couldn&#x27;t read from was &lt;code&gt;0x0&lt;&#x2F;code&gt;. Since this is &lt;code&gt;NULL&lt;&#x2F;code&gt;, we know that we&#x27;re trying to read from a null pointer. &lt;code&gt;not stack&#x27;d, malloc&#x27;d or (recently) free&#x27;d&lt;&#x2F;code&gt; tells us that this pointer is neither a stack nor a heap pointer, which is obviously true for &lt;code&gt;NULL&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;nasm&quot;&gt;NASM&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;nasm.us&#x2F;&quot;&gt;NASM&lt;&#x2F;a&gt; is an assembler that is often preferred to GAS (the assembler taught directly in class). It uses the more intuitive Intel syntax rather than the AT&amp;amp;T syntax used by GAS, and is versatile enough to have your entire attacklab payload be created from a single assembly file, rather than needing to stich together a bunch of &lt;code&gt;printf&lt;&#x2F;code&gt; calls with &lt;code&gt;cat&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;intel-vs-at-t-syntax&quot;&gt;Intel vs. AT&amp;amp;T Syntax&lt;&#x2F;h2&gt;
&lt;p&gt;C version:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) {
	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) {
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) {
			n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
		} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
			n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
		}
	}
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;GAS&#x2F;AT&amp;amp;T Syntax version:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#a6e22e;&quot;&gt;main:
	movl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;n = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;jmp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;test                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;# while(n != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;) {
.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;loop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;:
	testl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;jz &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.if_true                  #   if(n % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;)
.if_true:                        #   {
    shrl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;#     n = n &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;jmp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;test                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;#   }
.if_false:                       #   else {
	leal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;#     n = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;:                           #   }
	cmpl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;jne &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;loop                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;# }
.end:
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;dec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;# return n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;ret
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Intel Syntax version:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#a6e22e;&quot;&gt;main:
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;                ; int n = 20;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;jmp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;                  ; while(n != 1) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;loop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;:
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;jz &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.if_true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;                ;   if(n % 2 == 0)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.if_true:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;                      ;   {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;shr &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;                 ;     n = n &#x2F; 2;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;jmp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;                  ;   }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.if_false:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;                     ;   else {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;lea &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt; ;     n = 3 * n + 1;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;                         ;   }
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;cmp &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;jne &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;loop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;                  ; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.end:
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;dec &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;                    ; return n - 1;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;ret
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, the Intel syntax version is more C-like (&lt;code&gt;n = 20&lt;&#x2F;code&gt; becomes &lt;code&gt;mov eax, 20&lt;&#x2F;code&gt;), and has less visual noise (&lt;code&gt;20&lt;&#x2F;code&gt; is obviously a number, you don&#x27;t need to call it &lt;code&gt;$20&lt;&#x2F;code&gt;). This is especially noticeable in the &lt;code&gt;lea&lt;&#x2F;code&gt; instructions corresponding to &lt;code&gt;n = 3 * n + 1&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#75715e;&quot;&gt;; Intel
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;lea &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#a6e22e;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;AT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;&amp;amp;T
leal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I really have no idea what the person who came up with &lt;code&gt;1(%rax, %rax, 2)&lt;&#x2F;code&gt; was thinking...&lt;&#x2F;p&gt;
&lt;h1 id=&quot;misc-tips&quot;&gt;Misc. Tips&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;argument-passing-order&quot;&gt;Argument Passing Order&lt;&#x2F;h2&gt;
&lt;p&gt;The mnemonic to remember is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Di&lt;&#x2F;strong&gt;ane&#x27;s&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Si&lt;&#x2F;strong&gt;lk&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;D&lt;&#x2F;strong&gt;ress&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;C&lt;&#x2F;strong&gt;ost&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;8&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;9&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;$&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;From first to last, these are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r&lt;&#x2F;code&gt;&lt;strong&gt;&lt;code&gt;di&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;r&lt;&#x2F;code&gt;&lt;strong&gt;&lt;code&gt;si&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;r&lt;&#x2F;code&gt;&lt;strong&gt;&lt;code&gt;d&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;code&gt;x&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;r&lt;&#x2F;code&gt;&lt;strong&gt;&lt;code&gt;c&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;code&gt;x&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;r&lt;&#x2F;code&gt;&lt;strong&gt;&lt;code&gt;8&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;r&lt;&#x2F;code&gt;&lt;strong&gt;&lt;code&gt;9&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;strong&gt;$&lt;&#x2F;strong&gt; tack&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So if we have the code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;unsigned int &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) {
	foo(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will turn into the assembly:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;span style=&quot;color:#a6e22e;&quot;&gt;main:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;
	; MOVing to a register that starts with e
	; will clear the upper half of the r register
	; that it corresponds to.
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;edi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;esi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;xor &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;edx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;edx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt; ; Or `mov edx, 0&amp;#39;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;call &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;

	; return 0
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;xor &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;eax
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;ret
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;</description>
            </item>
        
    </channel>
</rss>
